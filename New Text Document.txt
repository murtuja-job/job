import java.util.Optional;
import org.springframework.web.client.RestTemplate;
import org.springframework.web.client.HttpStatusCodeException;
import org.springframework.http.ResponseEntity;
import org.springframework.http.HttpMethod;
import org.springframework.http.HttpEntity;
import org.springframework.http.HttpHeaders;

public class BulkTrainEventProcessor implements EventProcessor<AggregatedEquipmentStatusUpdatedEvent> {
    private final TrainService trainService;
    private final EventPublisher eventPublisher;
    private final IAggregatedStatusService aggregatedStatusService;
    private final IPlacementEventService placementEventService;
    private final RestTemplate restTemplate;
    private static final int MAX_RETRIES = 3;

    public BulkTrainEventProcessor(TrainService trainService, EventPublisher eventPublisher,
                                   IAggregatedStatusService aggregatedStatusService,
                                   IPlacementEventService placementEventService, RestTemplate restTemplate) {
        this.trainService = trainService;
        this.eventPublisher = eventPublisher;
        this.aggregatedStatusService = aggregatedStatusService;
        this.placementEventService = placementEventService;
        this.restTemplate = restTemplate;
    }

    @Override
    public void processEvent(AggregatedEquipmentStatusUpdatedEvent event) {
        if (!aggregatedStatusService.shouldProcessEvent(event)) {
            return;
        }
        
        int retryCount = 0;
        while (retryCount < MAX_RETRIES) {
            try {
                AggregatedEquipmentStatusResponse response = aggregatedStatusService.calculateAggregatedStatus(event, trainService);
                aggregatedStatusService.updateAggregatedStatus(response, event);
                placementEventService.processPlacementEvent(response, eventPublisher);
                callBulkTrainStatusService(response);
                return; // Successfully processed, exit loop
            } catch (VersionMismatchException e) {
                return; // Stop processing the event immediately
            } catch (RetryableException e) {
                retryCount++;
                if (retryCount == MAX_RETRIES) {
                    System.err.println("Max retries reached. Failed to process event: " + event);
                    return;
                }
            }
        }
    }

    private void callBulkTrainStatusService(AggregatedEquipmentStatusResponse response) {
        HttpHeaders headers = new HttpHeaders();
        headers.set("Content-Type", "application/json");
        HttpEntity<AggregatedEquipmentStatusResponse> request = new HttpEntity<>(response, headers);
        
        int retryCount = 0;
        while (retryCount < MAX_RETRIES) {
            try {
                ResponseEntity<String> apiResponse = restTemplate.exchange(BULK_TRAIN_STATUS_URL, HttpMethod.POST, request, String.class);
                if (apiResponse.getStatusCode().is2xxSuccessful()) {
                    System.out.println("Bulk Train Status Service call successful");
                    return;
                }
            } catch (HttpStatusCodeException e) {
                if (e.getStatusCode().is4xxClientError()) {
                    System.err.println("Client error: " + e.getMessage());
                    return; // Stop retrying on client errors
                } else if (e.getStatusCode().is5xxServerError()) {
                    retryCount++;
                    if (retryCount == MAX_RETRIES) {
                        System.err.println("Max retries reached. Failed to call Bulk Train Status Service");
                    }
                }
            } catch (Exception e) {
                System.err.println("Unexpected error: " + e.getMessage());
                return;
            }
        }
    }
}

interface EventProcessor<T> {
    void processEvent(T event);
}

interface IAggregatedStatusService {
    boolean shouldProcessEvent(AggregatedEquipmentStatusUpdatedEvent event);
    AggregatedEquipmentStatusResponse calculateAggregatedStatus(AggregatedEquipmentStatusUpdatedEvent event, TrainService trainService);
    void updateAggregatedStatus(AggregatedEquipmentStatusResponse response, AggregatedEquipmentStatusUpdatedEvent event);
}

class AggregatedStatusService implements IAggregatedStatusService {
    @Override
    public boolean shouldProcessEvent(AggregatedEquipmentStatusUpdatedEvent event) {
        return !"NBTAggregator".equals(event.getAggregatedEquipmentStatus().getAuditData().getLastUpdatedSourceBusinessFunction());
    }

    @Override
    public AggregatedEquipmentStatusResponse calculateAggregatedStatus(AggregatedEquipmentStatusUpdatedEvent event, TrainService trainService) {
        return trainService.calculateBulkTrainAggregatedStatus(event);
    }

    @Override
    public void updateAggregatedStatus(AggregatedEquipmentStatusResponse response, AggregatedEquipmentStatusUpdatedEvent event) {
        event.getAggregatedEquipmentStatus().setAuditDataLastUpdatedSourceBusinessFunction("NBTAggregator");
    }
}

interface IPlacementEventService {
    void processPlacementEvent(AggregatedEquipmentStatusResponse response, EventPublisher eventPublisher);
}

class PlacementEventService implements IPlacementEventService {
    @Override
    public void processPlacementEvent(AggregatedEquipmentStatusResponse response, EventPublisher eventPublisher) {
        if (shouldPublishPlacementProcessed(response)) {
            PlacementProcessedEvent placementProcessedEvent = createPlacementProcessedEvent(response);
            eventPublisher.publish(placementProcessedEvent);
        }
    }

    private boolean shouldPublishPlacementProcessed(AggregatedEquipmentStatusResponse response) {
        return ("PlacedAtIndy".equals(response.getTrainStatus()) || "PlacementFailed".equals(response.getTrainStatus()))
                && !"NBTPlaceAtIndustry".equals(response.getAggregatedEquipmentStatus().getAuditData().getLastUpdatedSourceBusinessFunction());
    }

    private PlacementProcessedEvent createPlacementProcessedEvent(AggregatedEquipmentStatusResponse response) {
        PlacementProcessedEvent event = new PlacementProcessedEvent();
        event.setTrainKey(response.getAggregatedEquipmentStatus().getTrainKey());
        event.setPlacementStatus(response.getAggregatedEquipmentStatus().getAggregatedEquipmentStatus());
        response.getAggregatedEquipmentStatus().getEquipmentList().forEach(equipment -> {
            PlacementProcessedEvent.Equipment mappedEquipment = new PlacementProcessedEvent.Equipment();
            mappedEquipment.setEquipmentId(equipment.getEquipmentIdentifier().getEquipmentId());
            mappedEquipment.setPlacementStatus(equipment.getBulkTrainEquipmentStatus());
            event.addEquipment(mappedEquipment);
        });
        return event;
    }
}
